From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Thu, 19 Nov 2020 21:30:00 +0100
Subject: [PATCH 1/1] Reuse Arm intrinsics for WebAssembly

Upstream-Status: Pending

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1111111..2222222 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -48,7 +48,13 @@ foreach(ARCH ${CMAKE_OSX_ARCHITECTURES})
   endif()
   math(EXPR COUNT "${COUNT}+1")
 endforeach()
-if(CMAKE_SYSTEM_PROCESSOR_LC MATCHES "x86_64" OR
+if(EMSCRIPTEN)
+  if(BITS EQUAL 64)
+    set(CPU_TYPE wasm64)
+  else()
+    set(CPU_TYPE wasm32)
+  endif()
+elseif(CMAKE_SYSTEM_PROCESSOR_LC MATCHES "x86_64" OR
   CMAKE_SYSTEM_PROCESSOR_LC MATCHES "amd64" OR
   CMAKE_SYSTEM_PROCESSOR_LC MATCHES "i[0-9]86" OR
   CMAKE_SYSTEM_PROCESSOR_LC MATCHES "x86" OR
diff --git a/simd/CMakeLists.txt b/simd/CMakeLists.txt
index 1111111..2222222 100644
--- a/simd/CMakeLists.txt
+++ b/simd/CMakeLists.txt
@@ -211,16 +211,17 @@ endif()
 # Arm (Intrinsics or GAS)
 ###############################################################################
 
-elseif(CPU_TYPE STREQUAL "arm64" OR CPU_TYPE STREQUAL "arm")
+elseif(CPU_TYPE STREQUAL "arm64" OR CPU_TYPE STREQUAL "arm" OR
+  CPU_TYPE STREQUAL "wasm64" OR CPU_TYPE STREQUAL "wasm32")
 
 include(CheckSymbolExists)
-if(BITS EQUAL 32)
+if(BITS EQUAL 32 OR EMSCRIPTEN)
   set(CMAKE_REQUIRED_FLAGS -mfpu=neon)
 endif()
 check_symbol_exists(vld1_s16_x3 arm_neon.h HAVE_VLD1_S16_X3)
 check_symbol_exists(vld1_u16_x2 arm_neon.h HAVE_VLD1_U16_X2)
 check_symbol_exists(vld1q_u8_x4 arm_neon.h HAVE_VLD1Q_U8_X4)
-if(BITS EQUAL 32)
+if(BITS EQUAL 32 OR EMSCRIPTEN)
   unset(CMAKE_REQUIRED_FLAGS)
 endif()
 configure_file(arm/neon-compat.h.in arm/neon-compat.h @ONLY)
@@ -231,9 +232,9 @@ include_directories(${CMAKE_CURRENT_BINARY_DIR}/arm)
 # those compilers, we default to using the older GAS implementation of the Neon
 # SIMD extensions for certain algorithms.  The presence or absence of the three
 # intrinsics we tested above is a reasonable proxy for this.  We always default
-# to using the full Neon intrinsics implementation when building for macOS or
-# iOS, to avoid the need for gas-preprocessor.
-if((HAVE_VLD1_S16_X3 AND HAVE_VLD1_U16_X2 AND HAVE_VLD1Q_U8_X4) OR APPLE)
+# to using the full Neon intrinsics implementation when building for macOS, iOS
+# or Emscripten, to avoid the need for gas-preprocessor.
+if((HAVE_VLD1_S16_X3 AND HAVE_VLD1_U16_X2 AND HAVE_VLD1Q_U8_X4) OR APPLE OR EMSCRIPTEN)
   set(DEFAULT_NEON_INTRINSICS 1)
 else()
   set(DEFAULT_NEON_INTRINSICS 0)
@@ -262,7 +263,7 @@ if(NEON_INTRINSICS OR BITS EQUAL 32)
   set(SIMD_SOURCES ${SIMD_SOURCES} arm/aarch${BITS}/jchuff-neon.c
     arm/jdcolor-neon.c arm/jfdctint-neon.c)
 endif()
-if(BITS EQUAL 32)
+if(BITS EQUAL 32 OR EMSCRIPTEN)
   set_source_files_properties(${SIMD_SOURCES} COMPILE_FLAGS -mfpu=neon)
 endif()
 if(NOT NEON_INTRINSICS)
